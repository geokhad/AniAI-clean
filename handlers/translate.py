import os
from openai import OpenAI
from langdetect import detect
from telegram import Update
from telegram.ext import ContextTypes
from utils.google_sheets import log_translate

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

async def translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = " ".join(context.args)

    if not text:
        await update.message.reply_text("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /translate.")
        return

    if len(text) > 3000:
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–µ –±–æ–ª–µ–µ 3000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    source_lang = detect(text)

    if source_lang == "ru":
        prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫:
{text}"
    else:
        prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:
{text}"

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        result = response.choices[0].message.content
        await update.message.reply_text(f"üìÑ –ü–µ—Ä–µ–≤–æ–¥:
{result}")
        log_translate(user.id, user.full_name, user.username, text)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ:
{e}")


