from telegram import Update
from telegram.ext import ContextTypes
import os
from openai import OpenAI
from handlers.state import active_ask
from utils.google_sheets import log_gpt
from utils.memory import get_memory, update_memory

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üö´ –ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–º—ã
BANNED_WORDS = [
    "—Ö—É–π", "–ø–∏–∑–¥–∞", "–±–ª—è–¥—å", "–µ–±–∞—Ç—å", "–Ω–∞—Ö—É–π", "—Å—É–∫–∞", "—É—ë–±–æ–∫", "–º—É–¥–∏–ª–∞",
    "—Ç–µ—Ä—Ä–æ—Ä", "—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç", "—Ç–µ—Ä–∞–∫—Ç", "—É–±–∏–π—Å—Ç–≤–æ", "–Ω–∞—Å–∏–ª–∏–µ", "–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ",
    "–≤–æ–π–Ω–∞", "—É–∫—Ä–∞–∏–Ω", "—Ä—É—Å—Å–∫", "–ø—É—Ç–∏–Ω", "–∑–µ–ª–µ–Ω—Å–∫", "–º–æ—Å–∫–∞–ª", "–æ–∫–∫—É–ø–∞–Ω—Ç"
]

def contains_banned_words(text):
    lower = text.lower()
    return any(word in lower for word in BANNED_WORDS)

# –ö–æ–º–∞–Ω–¥–∞ /ask
async def handle_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = " ".join(context.args)
    if not prompt:
        await update.message.reply_text("‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return

    if contains_banned_words(prompt):
        await update.message.reply_text("üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
        return

    user_id = update.effective_user.id
    active_ask.add(user_id)
    await send_gpt_response(update, prompt)

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ GPT-–¥–∏–∞–ª–æ–≥–∞
async def handle_gpt_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_ask:
        return

    prompt = update.message.text.strip()

    if contains_banned_words(prompt):
        await update.message.reply_text("üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
        return

    await send_gpt_response(update, prompt)

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∏ —Ä–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é
async def send_gpt_response(update: Update, prompt: str):
    user_id = update.effective_user.id
    full_name = update.effective_user.full_name

    try:
        memory = get_memory(user_id)
        messages = [{"role": "system", "content": "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ, –∫—Ä–∞—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."}]

        for q, a in memory:
            messages.append({"role": "user", "content": q})
            messages.append({"role": "assistant", "content": a})

        messages.append({"role": "user", "content": prompt})

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages
        )
        answer = response.choices[0].message.content.strip()
        await update.message.reply_text(answer)

        update_memory(user_id, prompt, answer)

        log_gpt(
            user_id=user_id,
            full_name=full_name,
            question=prompt,
            answer=answer
        )

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç GPT: {e}")
