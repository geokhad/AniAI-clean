import os
import subprocess
from telegram import Update
from telegram.ext import ContextTypes
from openai import OpenAI
from handlers.state import (
    clear_user_state,
    active_tts,
    active_translators,
    active_imagers,
    active_ask
)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üéô –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (Whisper API)
async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    voice = update.message.voice

    if not voice:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    await update.message.reply_text("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

    file = await context.bot.get_file(voice.file_id)
    ogg_path = f"/tmp/{voice.file_unique_id}.ogg"
    wav_path = ogg_path.replace(".ogg", ".wav")
    await file.download_to_drive(ogg_path)

    try:
        subprocess.run(
            ["ffmpeg", "-y", "-i", ogg_path, "-ar", "16000", "-ac", "1", wav_path],
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ffmpeg: {e}")
        return

    try:
        with open(wav_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="text"
            )

        text = transcript.strip()
        await update.message.reply_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n{text}")

        # ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        lower = text.lower()

        if "–ø–µ—Ä–µ–≤–µ–¥–∏" in lower or "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏" in lower:
            clear_user_state(user_id)
            active_translators.add(user_id)
            await update.message.reply_text("üåç –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞. –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            return

        elif "–∫–∞—Ä—Ç–∏–Ω–∫—É" in lower or "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" in lower or "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π" in lower:
            clear_user_state(user_id)
            active_imagers.add(user_id)
            await update.message.reply_text("üì∏ –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –û–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–æ–±—Ä–∞–∑–∏—Ç—å.")
            return

        elif "–æ–∑–≤—É—á—å" in lower or "–ø—Ä–æ—á–∏—Ç–∞–π" in lower:
            clear_user_state(user_id)
            active_tts.add(user_id)
            await update.message.reply_text("üó£ –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ–∑–≤—É—á–∫–∏. –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –≥–æ–ª–æ—Å.")
            return

        elif "–≤–æ–ø—Ä–æ—Å" in lower or "–æ–±—ä—è—Å–Ω–∏" in lower or "—á—Ç–æ —Ç–∞–∫–æ–µ" in lower:
            clear_user_state(user_id)
            active_ask.add(user_id)
            await update.message.reply_text("üß† –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º GPT-–ø–æ–º–æ—â–∏. –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
            return

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")

# üì¢ –û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /tts
async def handle_tts_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("üîä –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /tts, —á—Ç–æ–±—ã –æ–∑–≤—É—á–∏—Ç—å.")
        return
    await handle_tts_playback(update, text)

# üì¢ –û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ–∂–∏–º (–ø–æ –∫–Ω–æ–ø–∫–µ)
async def handle_tts_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_tts:
        return

    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è.")
        return

    await handle_tts_playback(update, text)
    active_tts.discard(user_id)

# üîä –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
async def handle_tts_playback(update: Update, text: str):
    await update.message.reply_text("üéß –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

    try:
        response = client.audio.speech.create(
            model="tts-1-hd",
            voice="nova",
            input=text
        )
        ogg_path = f"/tmp/tts-{update.effective_user.id}.ogg"
        with open(ogg_path, "wb") as f:
            f.write(response.content)

        with open(ogg_path, "rb") as audio_file:
            await update.message.reply_voice(voice=audio_file, caption="üó£ –û–∑–≤—É—á–∫–∞ –≥–æ—Ç–æ–≤–∞!")

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ TTS: {e}")
