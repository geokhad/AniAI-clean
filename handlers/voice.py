import os
import subprocess
import time
from telegram import Update
from telegram.ext import ContextTypes
from openai import OpenAI
from handlers.state import (
    clear_user_state,
    active_tts,
    active_translators,
    active_imagers,
    active_ask,
    notified_voice_users,
)
from utils.memory import get_memory, update_memory
from utils.google_sheets import log_translation
from handlers.image import handle_image_prompt
from handlers.music import handle_music_prompt  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üéô –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    voice = update.message.voice

    if not voice:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    await update.message.reply_text("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

    file = await context.bot.get_file(voice.file_id)
    ogg_path = f"/tmp/{voice.file_unique_id}.ogg"
    wav_path = ogg_path.replace(".ogg", ".wav")
    await file.download_to_drive(ogg_path)

    try:
        subprocess.run(
            ["ffmpeg", "-y", "-i", ogg_path, "-ar", "16000", "-ac", "1", wav_path],
            check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ ffmpeg: {e}")
        return

    try:
        with open(wav_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="text"
            )
        text = transcript.strip() if transcript else ""
        await update.message.reply_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:
{text}")

        lower = text.lower()

        if user_id not in notified_voice_users:
            notified_voice_users.add(user_id)
            await update.message.reply_text(
                "üí° –¢—ã –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å —Ñ—Ä–∞–∑—ã:
"
                "‚Ä¢ ¬´–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π I love you¬ª
"
                "‚Ä¢ ¬´—Å–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É¬ª
"
                "‚Ä¢ ¬´—Å—ã–≥—Ä–∞–π –º—É–∑—ã–∫—É¬ª
"
                "‚Ä¢ ¬´–æ–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç–∞–∫–æ–µ‚Ä¶¬ª
"
                "‚Ä¢ ¬´–æ–∑–≤—É—á—å¬ª

"
                "–Ø —Å–∞–º –ø–æ–π–º—É, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å ü§ñ"
            )

        if "–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π" in lower:
            prompt = text.split("–Ω–∞ —Ä—É—Å—Å–∫–∏–π", 1)[-1].strip()
            await translate_and_reply(update, prompt, "–Ω–∞ —Ä—É—Å—Å–∫–∏–π")
            return

        if "–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π" in lower:
            prompt = text.split("–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π", 1)[-1].strip()
            await translate_and_reply(update, prompt, "–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
            return

        if any(word in lower for word in ["–ø–µ—Ä–µ–≤–µ–¥–∏", "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏"]):
            clear_user_state(user_id)
            active_translators.add(user_id)
            await update.message.reply_text("üåç –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞. –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç.")
            return

        if any(word in lower for word in ["–æ–∑–≤—É—á—å", "–ø—Ä–æ—á–∏—Ç–∞–π"]):
            phrase = text.split("–æ–∑–≤—É—á—å", 1)[-1].strip() if "–æ–∑–≤—É—á—å" in lower else text.split("–ø—Ä–æ—á–∏—Ç–∞–π", 1)[-1].strip()
            if phrase:
                await handle_tts_playback(update, phrase)
            else:
                clear_user_state(user_id)
                active_tts.add(user_id)
                await update.message.reply_text("üó£ –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ–∑–≤—É—á–∫–∏. –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç.")
            return

        if any(word in lower for word in ["—Å—ã–≥—Ä–∞–π", "–º—É–∑—ã–∫—É", "–º–µ–ª–æ–¥–∏—é", "—Ö–æ—á—É –º—É–∑—ã–∫—É"]):
            await update.message.reply_text("üéß –î—É–º–∞—é –Ω–∞–¥ –º—É–∑—ã–∫–æ–π...")
            await handle_music_prompt(update, context)
            return

        if any(word in lower for word in ["–∫–∞—Ä—Ç–∏–Ω–∫—É", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "—Å–æ–∑–¥–∞–π", "–Ω–∞—Ä–∏—Å—É–π", "–∏–∑–æ–±—Ä–∞–∑–∏"]):
            clear_user_state(user_id)
            await update.message.reply_text("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...")
            await handle_image_prompt(update, context, prompt=text)
            return

        if "?" in text or any(word in lower for word in ["–æ–±—ä—è—Å–Ω–∏", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–∑–∞—á–µ–º", "–∫–∞–∫", "–ø–æ—á–µ–º—É"]):
            clear_user_state(user_id)
            active_ask.add(user_id)
            await gpt_answer(update, text)
            return

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")

# –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—É—â–µ–Ω—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏...
