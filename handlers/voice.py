import os
import subprocess
from telegram import Update
from telegram.ext import ContextTypes
from openai import OpenAI
from handlers.state import (
    clear_user_state,
    active_tts,
    active_translators,
    active_imagers,
    active_ask,
    notified_voice_users
)

try:
    from utils.google_sheets import log_translation
except ImportError:
    log_translation = lambda *args, **kwargs: None

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üéô –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    voice = update.message.voice

    if not voice:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    await update.message.reply_text("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

    file = await context.bot.get_file(voice.file_id)
    ogg_path = f"/tmp/{voice.file_unique_id}.ogg"
    wav_path = ogg_path.replace(".ogg", ".wav")
    await file.download_to_drive(ogg_path)

    try:
        subprocess.run(
            ["ffmpeg", "-y", "-i", ogg_path, "-ar", "16000", "-ac", "1", wav_path],
            check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ ffmpeg: {e}")
        return

    try:
        with open(wav_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="text"
            )

        text = transcript.strip()
        await update.message.reply_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n{text}")

        if user_id not in notified_voice_users:
            notified_voice_users.add(user_id)
            await update.message.reply_text(
                "üí° –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ ¬´–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ I love you¬ª\n"
                "‚Ä¢ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É¬ª\n"
                "‚Ä¢ ¬´–û–∑–≤—É—á—å —Ç–µ–∫—Å—Ç¬ª\n"
                "‚Ä¢ ¬´–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ...¬ª\n\n"
                "–Ø —Å–∞–º–∞ –≤–∫–ª—é—á—É –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º ü§ñ"
            )

        lower = text.lower()

        if "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π" in lower or "–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π" in lower:
            prompt = text.split("–Ω–∞ —Ä—É—Å—Å–∫–∏–π", 1)[-1].strip()
            await translate_and_reply(update, prompt, "–Ω–∞ —Ä—É—Å—Å–∫–∏–π")
            return

        if "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π" in lower or "–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π" in lower:
            prompt = text.split("–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π", 1)[-1].strip()
            await translate_and_reply(update, prompt, "–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
            return

        if any(word in lower for word in ["–ø–µ—Ä–µ–≤–µ–¥–∏", "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏"]):
            clear_user_state(user_id)
            active_translators.add(user_id)
            await update.message.reply_text("üåç –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞. –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç.")
            return

        if any(word in lower for word in ["–æ–∑–≤—É—á—å", "–ø—Ä–æ—á–∏—Ç–∞–π"]):
            phrase = text.split("–æ–∑–≤—É—á—å", 1)[-1].strip() if "–æ–∑–≤—É—á—å" in lower else text.split("–ø—Ä–æ—á–∏—Ç–∞–π", 1)[-1].strip()
            if phrase:
                await handle_tts_playback(update, phrase)
            else:
                clear_user_state(user_id)
                active_tts.add(user_id)
                await update.message.reply_text("üó£ –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ–∑–≤—É—á–∫–∏. –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç.")
            return

        if any(word in lower for word in ["–∫–∞—Ä—Ç–∏–Ω–∫—É", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–∏–∑–æ–±—Ä–∞–∑–∏", "—Å–æ–∑–¥–∞–π"]):
            clear_user_state(user_id)
            active_imagers.add(user_id)
            await update.message.reply_text("ü§ñ –î—É–º–∞—é...\nüì∏ –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –û–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return

        if any(word in lower for word in ["–æ–±—ä—è—Å–Ω–∏", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–≤–æ–ø—Ä–æ—Å"]):
            clear_user_state(user_id)
            active_ask.add(user_id)
            await update.message.reply_text("üß† –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º GPT. –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
            return

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")

# üåç –ü–µ—Ä–µ–≤–æ–¥
async def translate_and_reply(update: Update, text: str, direction: str):
    try:
        system = "–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π." if direction == "–Ω–∞ —Ä—É—Å—Å–∫–∏–π" else "–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system},
                {"role": "user", "content": text}
            ]
        )
        translation = response.choices[0].message.content.strip()
        await update.message.reply_text(f"üåç –ü–µ—Ä–µ–≤–æ–¥:\n{translation}")
        log_translation(update.effective_user.id, update.effective_user.full_name, text, translation)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")

# üîä –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞
async def handle_tts_playback(update: Update, text: str):
    await update.message.reply_text("üéß –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    try:
        response = client.audio.speech.create(
            model="tts-1-hd",
            voice="nova",
            input=text
        )
        path = f"/tmp/tts-{update.effective_user.id}.ogg"
        with open(path, "wb") as f:
            f.write(response.content)
        with open(path, "rb") as audio_file:
            await update.message.reply_voice(voice=audio_file, caption="üó£ –û–∑–≤—É—á–∫–∞ –≥–æ—Ç–æ–≤–∞!")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ TTS: {e}")
