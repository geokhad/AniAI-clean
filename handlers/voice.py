import os
import subprocess
from telegram import Update
from telegram.ext import ContextTypes
from openai import OpenAI
from handlers.state import (
    clear_user_state,
    active_tts,
    active_translators,
    active_imagers,
    active_ask,
    notified_voice_users,
)
from handlers.exam_mode import active_voa_exam, handle_voa_text_exam
from utils.memory import get_memory, update_memory
from utils.google_sheets import log_translation
from handlers.image import handle_image_prompt
from handlers.music import handle_music_prompt
from utils.safety import contains_prohibited_content

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    voice = update.message.voice

    if not voice:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    await update.message.reply_text("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

    file = await context.bot.get_file(voice.file_id)
    ogg_path = f"/tmp/{voice.file_unique_id}.ogg"
    wav_path = ogg_path.replace(".ogg", ".wav")
    await file.download_to_drive(ogg_path)

    try:
        subprocess.run(
            ["ffmpeg", "-y", "-i", ogg_path, "-ar", "16000", "-ac", "1", wav_path],
            check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
        )

        with open(wav_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="text"
            )

        text = transcript.strip() if transcript else ""

        if not text:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        if contains_prohibited_content(text):
            await update.message.reply_text("üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–ª–∏ –æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
            return

        lower = text.lower()

        # ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ VOA Exam
        if user_id in active_voa_exam:
            # –ò–º–∏—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            update.effective_message.text = text
            await handle_voa_text_exam(update, context)
            return

        # üìù –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        await update.message.reply_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n{text}")

        if user_id not in notified_voice_users:
            notified_voice_users.add(user_id)
            await update.message.reply_text(
                "üí° –¢—ã –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ ¬´–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π I love you¬ª\n"
                "‚Ä¢ ¬´—Å–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É¬ª\n"
                "‚Ä¢ ¬´—Å—ã–≥—Ä–∞–π –º—É–∑—ã–∫—É¬ª\n"
                "‚Ä¢ ¬´–æ–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç–∞–∫–æ–µ‚Ä¶¬ª\n"
                "‚Ä¢ ¬´–æ–∑–≤—É—á—å —Ç–µ–∫—Å—Ç¬ª\n\n"
                "–Ø —Å–∞–º –ø–æ–π–º—É, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å ü§ñ"
            )

        if "–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π" in lower:
            prompt = text.split("–Ω–∞ —Ä—É—Å—Å–∫–∏–π", 1)[-1].strip()
            await translate_and_reply(update, prompt, "–Ω–∞ —Ä—É—Å—Å–∫–∏–π")
            return

        if "–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π" in lower:
            prompt = text.split("–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π", 1)[-1].strip()
            await translate_and_reply(update, prompt, "–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
            return

        if any(word in lower for word in ["–ø–µ—Ä–µ–≤–µ–¥–∏", "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏"]):
            clear_user_state(user_id)
            active_translators.add(user_id)
            await update.message.reply_text("üåç –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞. –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç.")
            return

        if any(word in lower for word in ["–æ–∑–≤—É—á—å", "–ø—Ä–æ—á–∏—Ç–∞–π"]):
            phrase = text.split("–æ–∑–≤—É—á—å", 1)[-1].strip() if "–æ–∑–≤—É—á—å" in lower else text.split("–ø—Ä–æ—á–∏—Ç–∞–π", 1)[-1].strip()
            if phrase:
                await handle_tts_playback(update, phrase)
            else:
                clear_user_state(user_id)
                active_tts.add(user_id)
                await update.message.reply_text("üó£ –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ–∑–≤—É—á–∫–∏. –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç.")
            return

        if any(word in lower for word in ["—Å—ã–≥—Ä–∞–π", "–º—É–∑—ã–∫—É", "–º–µ–ª–æ–¥–∏—é", "—Ö–æ—á—É –º—É–∑—ã–∫—É"]):
            await update.message.reply_text("üéß –î—É–º–∞—é –Ω–∞–¥ –º—É–∑—ã–∫–æ–π...")
            await handle_music_prompt(update, context)
            return

        if any(word in lower for word in ["–∫–∞—Ä—Ç–∏–Ω–∫—É", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "—Å–æ–∑–¥–∞–π", "–Ω–∞—Ä–∏—Å—É–π", "–∏–∑–æ–±—Ä–∞–∑–∏"]):
            clear_user_state(user_id)
            await update.message.reply_text("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...")
            await handle_image_prompt(update, context, prompt=text)
            return

        if "?" in text or any(word in lower for word in ["–æ–±—ä—è—Å–Ω–∏", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–∑–∞—á–µ–º", "–∫–∞–∫", "–ø–æ—á–µ–º—É"]):
            clear_user_state(user_id)
            active_ask.add(user_id)
            await gpt_answer(update, text)
            return

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")

# üåç –ü–µ—Ä–µ–≤–æ–¥
async def translate_and_reply(update: Update, text: str, direction: str):
    try:
        system = "–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π." if direction == "–Ω–∞ —Ä—É—Å—Å–∫–∏–π" else "–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system},
                {"role": "user", "content": text}
            ]
        )
        translation = response.choices[0].message.content.strip()
        await update.message.reply_text(f"üåç –ü–µ—Ä–µ–≤–æ–¥:\n{translation}")
        log_translation(update.effective_user.id, update.effective_user.full_name, text, translation)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")

# ü§ñ –û—Ç–≤–µ—Ç —Å GPT
async def gpt_answer(update: Update, prompt: str):
    user_id = update.effective_user.id
    history = get_memory(user_id)

    messages = [{"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ Telegram."}]
    for q, a in history:
        messages.append({"role": "user", "content": q})
        messages.append({"role": "assistant", "content": a})
    messages.append({"role": "user", "content": prompt})

    await update.message.reply_text("ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages
        )
        answer = response.choices[0].message.content.strip()
        await handle_tts_playback(update, answer)
        update_memory(user_id, prompt, answer)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")

# üîä –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞
async def handle_tts_playback(update: Update, text: str):
    await update.message.reply_text("üéß –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    try:
        response = client.audio.speech.create(
            model="tts-1-hd",
            voice="nova",
            input=text
        )
        path = f"/tmp/tts-{update.effective_user.id}.ogg"
        with open(path, "wb") as f:
            f.write(response.content)
        with open(path, "rb") as audio_file:
            await update.message.reply_voice(voice=audio_file)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ TTS: {e}")

# üì¢ –û–∑–≤—É—á–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
async def handle_tts_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_tts:
        return
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        return
    if contains_prohibited_content(text):
        await update.message.reply_text("üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–ª–∏ –æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
        return
    await handle_tts_playback(update, text)
    active_tts.discard(user_id)
