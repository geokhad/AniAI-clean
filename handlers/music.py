
import os
import requests
from telegram import Update
from telegram.ext import ContextTypes

HUGGINGFACE_API_KEY = os.getenv("HUGGINGFACE_API_KEY")
API_URL = "https://api-inference.huggingface.co/models/suno/bark"

headers = {
    "Authorization": f"Bearer {HUGGINGFACE_API_KEY}"
}

# üéº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
async def handle_music_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéß –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º—É–∑—ã–∫—É –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é...")

    prompt = update.message.text.strip()
    if not prompt:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏, –∫–∞–∫—É—é –º—É–∑—ã–∫—É —Ç—ã —Ö–æ—á–µ—à—å.")
        return

    try:
        payload = {
            "inputs": prompt
        }
        response = requests.post(API_URL, headers=headers, json=payload, stream=True)

        if response.status_code != 200:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏: {response.status_code} ‚Äî {response.text}")
            return

        audio_path = f"/tmp/music-{update.effective_user.id}.wav"
        with open(audio_path, "wb") as f:
            for chunk in response.iter_content(chunk_size=4096):
                f.write(chunk)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        with open(audio_path, "rb") as audio_file:
            await update.message.reply_voice(voice=audio_file, caption="üé∂ –í–æ—Ç —Ç–≤–æ—è –º—É–∑—ã–∫–∞!")

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏: {e}")

