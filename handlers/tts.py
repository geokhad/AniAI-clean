# handlers/tts.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from openai import OpenAI
import os

from handlers.state import active_tts

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üéß –û–∑–≤—É—á–∫–∞ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º (TTS)
async def tts_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    active_tts.add(user_id)
    await update.message.reply_text(
        "üîä –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –∏ —è –æ–∑–≤—É—á—É –µ–≥–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º —Å –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_menu")]
        ])
    )

async def handle_tts_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_tts:
        return

    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è.")
        return

    await update.message.reply_text("üéß –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å...")

    try:
        response = client.audio.speech.create(
            model="tts-1-hd",
            voice="onyx",  # "nova" –∏–ª–∏ "onyx" –∑–≤—É—á–∞—Ç –±–æ–ª–µ–µ –Ω–∞—Ç—É—Ä–∞–ª–∏—Å—Ç–∏—á–Ω–æ
            input=text
        )
        path = f"/tmp/tts-{user_id}.ogg"
        with open(path, "wb") as f:
            f.write(response.content)

        with open(path, "rb") as audio_file:
            await update.message.reply_voice(voice=audio_file, caption="üîä –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ: {e}")

    # ‚ùå –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    active_tts.discard(user_id)

