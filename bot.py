import os
import logging
import asyncio
from dotenv import load_dotenv
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)
from aiohttp import web
import nest_asyncio

from ai.chat import handle_ask
from handlers.start import start
from handlers.menu import menu

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
nest_asyncio.apply()
load_dotenv()

TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8080))
HOST = "0.0.0.0"

# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
app = ApplicationBuilder().token(TOKEN).build()

# –ö–æ–º–∞–Ω–¥—ã
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("ask", handle_ask))
app.add_handler(CommandHandler("menu", menu))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "go_menu":
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é AniAI –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
        )
        await context.bot.send_message(chat_id=query.message.chat.id, text="/menu")

    elif query.data == "gpt_help":
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text="üß† GPT-–ø–æ–º–æ—â—å –¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏:\n\n"
                 "‚Ä¢ –û–±—ä—è—Å–Ω–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏...\n"
                 "‚Ä¢ –°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω —Å—Ç–∞—Ç—å–∏ –æ...\n"
                 "‚Ä¢ –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ç–µ–∑–∏—Å—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞...\n"
                 "‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...",
        )

    elif query.data == "voice_mode":
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text="üéô –†–µ–∂–∏–º –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
        )

    elif query.data == "switch_language":
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text="üåê –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –í –±—É–¥—É—â–µ–º ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ üá∑üá∫/üá¨üáß"
        )

    elif query.data == "premium_mode":
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text="üí≥ –ü—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ 50 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–Ω–µ–π.\n"
                 "–ó–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –ø–ª—é—à–∫–∏, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–æ–≤ –∏ –¥–æ—Å—Ç—É–ø –∫ GPT-4o üîì"
        )

    elif query.data == "feedback":
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text="‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n/feedback –ú–Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, —Å–ø–∞—Å–∏–±–æ!"
        )

app.add_handler(CallbackQueryHandler(handle_button))

# Aiohttp Webhook
async def handle_telegram(request):
    data = await request.json()
    update = Update.de_json(data, app.bot)
    await app.process_update(update)
    return web.Response(text="OK")

async def handle_check(request):
    return web.Response(text="AniAI on Railway ‚úÖ")

# –ó–∞–ø—É—Å–∫
async def main():
    await app.initialize()
    await app.bot.set_webhook(url=WEBHOOK_URL)
    await app.start()

    web_app = web.Application()
    web_app.router.add_post("/", handle_telegram)
    web_app.router.add_get("/", handle_check)

    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, HOST, PORT)
    await site.start()

    print(f"‚úÖ AniAI —Å–ª—É—à–∞–µ—Ç Webhook –Ω–∞ {WEBHOOK_URL}")
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
