import os
import logging
import asyncio
from dotenv import load_dotenv
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)
from aiohttp import web
from ai.chat import handle_ask
from handlers.start import start
from handlers.menu import menu
import nest_asyncio

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
nest_asyncio.apply()
load_dotenv()

TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8080))
HOST = "0.0.0.0"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TOKEN).build()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("ask", handle_ask))
app.add_handler(CommandHandler("menu", menu))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "go_menu":
        await query.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é AniAI –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
        # —Å–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π Update –∏–∑ CallbackQuery –¥–ª—è –∫–æ–º–∞–Ω–¥—ã menu
        fake_update = Update(update.update_id, message=query.message)
        await menu(fake_update, context)

    elif data == "ask":
        await query.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /ask –í–æ–ø—Ä–æ—Å")

    elif data == "feedback":
        await query.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /feedback –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞")

    elif data == "launch":
        await query.message.reply_text("üöÄ AniAI –∑–∞–ø—É—â–µ–Ω–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ!")

    elif data == "help":
        await query.message.reply_text("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/start\n/ask\n/menu\n/feedback")


app.add_handler(CallbackQueryHandler(handle_button))


# aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Webhook
async def handle_telegram(request):
    data = await request.json()
    update = Update.de_json(data, app.bot)
    await app.process_update(update)
    return web.Response(text="OK")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
async def handle_check(request):
    return web.Response(text="AniAI on Railway ‚úÖ")


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    await app.initialize()
    await app.bot.set_webhook(url=WEBHOOK_URL)
    await app.start()

    web_app = web.Application()
    web_app.router.add_post("/", handle_telegram)
    web_app.router.add_get("/", handle_check)

    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, HOST, PORT)
    await site.start()

    print(f"‚úÖ AniAI —Å–ª—É—à–∞–µ—Ç Webhook –Ω–∞ {WEBHOOK_URL}")
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
